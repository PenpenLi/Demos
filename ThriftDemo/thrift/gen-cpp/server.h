/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_H
#define server_H

#include <thrift/TDispatchProcessor.h>
#include "EchoServer_types.h"



class serverIf {
 public:
  virtual ~serverIf() {}
  virtual void echo(std::string& _return, const std::string& msg) = 0;
};

class serverIfFactory {
 public:
  typedef serverIf Handler;

  virtual ~serverIfFactory() {}

  virtual serverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(serverIf* /* handler */) = 0;
};

class serverIfSingletonFactory : virtual public serverIfFactory {
 public:
  serverIfSingletonFactory(const boost::shared_ptr<serverIf>& iface) : iface_(iface) {}
  virtual ~serverIfSingletonFactory() {}

  virtual serverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(serverIf* /* handler */) {}

 protected:
  boost::shared_ptr<serverIf> iface_;
};

class serverNull : virtual public serverIf {
 public:
  virtual ~serverNull() {}
  void echo(std::string& /* _return */, const std::string& /* msg */) {
    return;
  }
};

typedef struct _server_echo_args__isset {
  _server_echo_args__isset() : msg(false) {}
  bool msg;
} _server_echo_args__isset;

class server_echo_args {
 public:

  server_echo_args() : msg() {
  }

  virtual ~server_echo_args() throw() {}

  std::string msg;

  _server_echo_args__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const server_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const server_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const server_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class server_echo_pargs {
 public:


  virtual ~server_echo_pargs() throw() {}

  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _server_echo_result__isset {
  _server_echo_result__isset() : success(false) {}
  bool success;
} _server_echo_result__isset;

class server_echo_result {
 public:

  server_echo_result() : success() {
  }

  virtual ~server_echo_result() throw() {}

  std::string success;

  _server_echo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const server_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const server_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const server_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _server_echo_presult__isset {
  _server_echo_presult__isset() : success(false) {}
  bool success;
} _server_echo_presult__isset;

class server_echo_presult {
 public:


  virtual ~server_echo_presult() throw() {}

  std::string* success;

  _server_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class serverClient : virtual public serverIf {
 public:
  serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  serverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& msg);
  void send_echo(const std::string& msg);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class serverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<serverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (serverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  serverProcessor(boost::shared_ptr<serverIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &serverProcessor::process_echo;
  }

  virtual ~serverProcessor() {}
};

class serverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  serverProcessorFactory(const ::boost::shared_ptr< serverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< serverIfFactory > handlerFactory_;
};

class serverMultiface : virtual public serverIf {
 public:
  serverMultiface(std::vector<boost::shared_ptr<serverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~serverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<serverIf> > ifaces_;
  serverMultiface() {}
  void add(boost::shared_ptr<serverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, msg);
    }
    ifaces_[i]->echo(_return, msg);
    return;
  }

};



#endif
