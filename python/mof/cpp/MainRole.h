#ifndef MOF_MAINROLE_H
#define MOF_MAINROLE_H

class MainRole{
public:
	void showDeathDialog(float);
	void absortPet(int, int);
	void addMonsterHurt(int,int);
	void absortPet(int,int);
	void emitSkill(int);
	void emitAngerSkill(int);
	void addMonsterHurt(int,	int);
	void getPetByID(int);
	void create(int,RoleTpltCfg *,int);
	void initCheersPetList(std::vector<int, std::allocator<int>>);
	void create(int,	RoleTpltCfg *, int);
	void MainRole(ObjType,int);
	void initGuildSkillList(std::vector<int,std::allocator<int>>);
	void getActivedPetIndex(void);
	void MainRole(ObjType, int);
	void changCheersPetList(int,int);
	void getActivedPet(void);
	void getVerifyCode(void)const;
	void deleteAllPets(void);
	void getSkillLearnState(int);
	void ~MainRole();
	void death(LivingObject *);
	void addAnger(int);
	void calcPlayerFat(void);
	void getPet(void);
	void deletePetByID(int);
	void setSkillLvlByServer(int);
	void calGuildSkillPropertyAdditionForPet(SkillIncrBattle	&);
	void getCheerPetByIndex(int);
	void getVerifyCode(void);
	void addMonsterDeadNum(void);
	void getMonsterDeadNum(void);
	void getMaxAnger(void);
	void animationHandler(BoneAniEventType, std::string, std::string, bool);
	void updateVerify(float);
	void deletePetByIndex(uint);
	void getCheersPetList(void);
	void changCheersPetList(int, int);
	void setVerifyCode(int);
	void createVerifyHurtMsg(void);
	void IsEliteCopyFinish(int);
	void isNewTitle(int);
	void refreshPet(PetMonster *);
	void checkHasActiveSKillsCanLearn(void);
	void damage(int,LivingObject *);
	void setNewEquipSkill(int);
	void unActivePet(int);
	void changeGuildSkillList(int);
	void damage(int,	LivingObject *);
	void getPetList(void);
	void clearMonsterDeadNum(void);
	void initCheersPetList(std::vector<int,std::allocator<int>>);
	void showPropertyChange(BaseProp,BattleProp,int);
	void checkHasStarCanUp(void);
	void calcPlayerProp(eSceneType);
	void addMonsterCriHurt(int, int);
	void calcGuildMaxFat(void);
	void changeCloth(BodyPart, int);
	void checkVipLvlAward(int);
	void addTitleByID(int);
	void getPetByIndex(uint);
	void completedAnimationSequenceNamed(char const*);
	void animationHandler(BoneAniEventType,std::string,std::string,bool);
	void getPetByIndex(unsigned int);
	void addTitlesByType(int,std::vector<obj_honorInfo,std::allocator<obj_honorInfo>> &);
	void shotDownShowDeathDialog(void);
	void calFatAddFromTitle(int);
	void onLevelUp(void);
	void update(float);
	void getTitlesByType(int, std::vector<obj_honorInfo, std::allocator<obj_honorInfo>> &);
	void getTitlesByType(int,std::vector<obj_honorInfo,std::allocator<obj_honorInfo>> &);
	void activePet(int);
	void setTitleNew(int);
	void changeCloth(BodyPart,int);
	void addMonsterCriHurt(int,int);
	void getPetIndexByID(int);
	void deletePetByIndex(unsigned int);
	void playLevelUpEffect(void);
	void getTitleCountGet(int);
	void checkHasPetCollectAward(void);
	void reBornInFighting(float);
	void showPropertyChange(BaseProp, BattleProp, int);
	void addTitlesByType(int, std::vector<obj_honorInfo, std::allocator<obj_honorInfo>> &);
	void addPet(PetMonster *);
	void clearMonsterHurts(void);
	void isEquipSkillById(int);
	void initGuildSkillList(std::vector<int,	std::allocator<int>>);
}
#endif