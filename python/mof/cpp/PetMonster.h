#ifndef MOF_PETMONSTER_H
#define MOF_PETMONSTER_H

class PetMonster{
public:
	void getIsBattlePet(void);
	void setBatk(int);
	void getBhp(void);
	void setStagelvl(int);
	void setBmergeExp(int);
	void getGrowth(void)const;
	void setBdodge(float);
	void getMaxLvl(void)const;
	void PetMonster(ObjType,int);
	void getMaxlvladd(void)const;
	void getBhp(void)const;
	void setStarlvl(int);
	void getGrowthadd(void)const;
	void getMaxExp(void);
	void getBexp(void)const;
	void InitWithPetInfo(obj_petinfo);
	void getStagelvl(void);
	void getAdditionalValue(void)const;
	void setMergelvl(int);
	void getBatk(void)const;
	void calculateAttributes(void);
	void getMonterTpltID(void);
	void setMonterTpltID(int);
	void getStarlvl(void);
	void getMergelvl(void)const;
	void calculatePetIncrHPAndSpeed(void);
	void getFightSpeed(void);
	void getExtlvladd(void);
	void setMergecurrentexp(int);
	void setGrowth(int);
	void setGrowthRate(float);
	void getExtlvladd(void)const;
	void damage(int, LivingObject *);
	void getBatk(void);
	void getVerifyCode(void)const;
	void getBdodge(void)const;
	void calculateBattle(void);
	void calculateAdditionalValue(void);
	void death(LivingObject *);
	void setBexp(int);
	void setStar(int);
	void setGrowthadd(int);
	void setMaxFat(int);
	void getGrowth(void);
	void getBhit(void);
	void getOriginalSpeed(void);
	void setExtlvladd(int);
	void getVerifyCode(void);
	void getBmergeExp(void)const;
	void calculateIncrAttributes(PetCfgDef	const*);
	void InitWithBattlePro(obj_petBattleProp);
	void setMaxlvladd(int);
	void getMaxExp(void)const;
	void animationHandler(BoneAniEventType, std::string, std::string, bool);
	void updateVerify(float);
	void getStagevalue(void);
	void getBattleForce(void)const;
	void calculateTotemAttributes(void);
	void setBdef(int);
	void getBdef(void)const;
	void PetMonster(ObjType, int);
	void calculateBaseAttributes(PetCfgDef	const*);
	void setVerifyCode(int);
	void setFightSpeed(int);
	void getVerifyOpen(void);
	void setBattleForce(int);
	void setIsBattlePet(bool);
	void getGrowthRate(void)const;
	void getStarlvl(void)const;
	void setMaxExp(int);
	void damage(int,LivingObject *);
	void getGrowthRate(void);
	void getBdef(void);
	void getMergecurrentexp(void);
	void afterRefreshMonsterHPCallBack(int);
	void setBhit(float);
	void getBhit(void)const;
	void getAllBeforeExp(void)const;
	void getFightSpeed(void)const;
	void getAllBeforeExp(void);
	void showPropertyChange(BaseProp,BattleProp,int);
	void setStagevalue(int);
	void calculatePetExp(void);
	void refreshPetHP(int);
	void setMaxLvl(int);
	void getMaxlvladd(void);
	void setAdditionalValue(int);
	void getMergelvl(void);
	void closeVerify(void);
	void getExp(void);
	void getStagevalue(void)const;
	void create(obj_petBattleProp);
	void MonsterCastSkill(LivingObject *);
	void setExp(int);
	void unActive(void);
	void getMaxLvl(void);
	void getExp(void)const;
	void animationHandler(BoneAniEventType,std::string,std::string,bool);
	void ~PetMonster();
	void getBexp(void);
	void setOriginalSpeed(int);
	void getMergecurrentexp(void)const;
	void getBmergeExp(void);
	void getOriginalSpeed(void)const;
	void getBdodge(void);
	void setVerifyOpen(bool);
	void setBhp(int);
	void updatePetSkills(int);
	void getAdditionalValue(void);
	void getBeAbsortedExp(void);
	void getStagelvl(void)const;
	void showPropertyChange(BaseProp, BattleProp, int);
	void setAllBeforeExp(int);
	void getBattleForce(void);
	void openVerify(void);
	void create(obj_petinfo);
	void resetPetState(void);
	void getGrowthadd(void);
}
#endif