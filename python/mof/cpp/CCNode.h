#ifndef MOF_CCNODE_H
#define MOF_CCNODE_H

class CCNode{
public:
	void stopAllActions(void);
	void setZOrder(int);
	void convertToWorldSpaceAR(cocos2d::CCPoint const&);
	void boundingBox(void);
	void update(float);
	void removeChild(cocos2d::CCNode*,bool);
	void setPosition(cocos2d::CCPoint	const&);
	void getUserObject(void);
	void getUserData(void);
	void reorderChild(cocos2d::CCNode*, int);
	void setActionManager(cocos2d::CCActionManager *);
	void nodeToWorldTransform(void);
	void getScaleY(void);
	void removeChildByTag(int);
	void getSkewX(void);
	void getGLServerState(void);
	void setRotationX(float);
	void registerScriptHandler(int);
	void schedule(float),float,uint,float);
	void ~CCNode();
	void transformAncestors(void);
	void parentToNodeTransform(void);
	void getAnchorPoint(void);
	void unregisterScriptHandler(void);
	void removeFromParentAndCleanup(bool);
	void runAction(cocos2d::CCAction *);
	void getOrderOfArrival(void);
	void addChild(cocos2d::CCNode*, int);
	void scheduleOnce(float),float);
	void scheduleUpdate(void);
	void removeAllChildren(void);
	void isVisible(void);
	void setScheduler(cocos2d::CCScheduler *);
	void getTag(void);
	void addChild(cocos2d::CCNode*);
	void scheduleOnce(float), float);
	void nodeToParentTransform(void);
	void setOrderOfArrival(uint);
	void removeChildByTag(int, bool);
	void ignoreAnchorPointForPosition(bool);
	void getActionManager(void);
	void removeChild(cocos2d::CCNode*, bool);
	void getAnchorPointInPoints(void);
	void onExitTransitionDidStart(void);
	void getScale(void);
	void CCNode(void);
	void setUserData(void *);
	void getVertexZ(void);
	void getContentSize(void);
	void onEnter(void);
	void setSkewX(float);
	void removeFromParent(void);
	void scheduleUpdateWithPriority(int);
	void convertToWorldSpace(cocos2d::CCPoint	const&);
	void sortAllChildren(void);
	void convertTouchToNodeSpace(cocos2d::CCTouch *);
	void setPosition(float, float);
	void setRotationY(float);
	void setVertexZ(float);
	void schedule(float),	float);
	void getScheduler(void);
	void onExit(void);
	void unscheduleAllSelectors(void);
	void setGLServerState(cocos2d::ccGLServerState);
	void schedule(float),float);
	void updateTransform(void);
	void getActionByTag(int);
	void setScaleY(float);
	void getParent(void);
	void setRotation(float);
	void getPosition(void);
	void setUserObject(cocos2d::CCObject *);
	void convertToNodeSpace(cocos2d::CCPoint const&);
	void setTag(int);
	void removeAllChildrenWithCleanup(bool);
	void unschedule(float));
	void setParent(cocos2d::CCNode*);
	void setVisible(bool);
	void getChildren(void);
	void removeChildByTag(int,bool);
	void visit(void);
	void worldToNodeTransform(void);
	void getRotationY(void);
	void addChild(cocos2d::CCNode*,int,int);
	void detachChild(cocos2d::CCNode*,bool);
	void setAnchorPoint(cocos2d::CCPoint const&);
	void setPosition(float,float);
	void getGrid(void);
	void removeChild(cocos2d::CCNode*);
	void resumeSchedulerAndActions(void);
	void stopActionByTag(int);
	void getScaleX(void);
	void getChildByTag(int);
	void stopAction(cocos2d::CCAction	*);
	void draw(void);
	void addChild(cocos2d::CCNode*,int);
	void create(void);
	void setOrderOfArrival(unsigned int);
	void onEnterTransitionDidFinish(void);
	void transform(void);
	void detachChild(cocos2d::CCNode*, bool);
	void setGrid(cocos2d::CCGridBase *);
	void getSkewY(void);
	void addChild(cocos2d::CCNode*, int, int);
	void setContentSize(cocos2d::CCSize const&);
	void numberOfRunningActions(void);
	void getPositionX(void);
	void schedule(int, float);
	void setPositionY(float);
	void schedule(float));
	void getRotationX(void);
	void setScale(float);
	void setPositionX(float);
	void setShaderProgram(cocos2d::CCGLProgram *);
	void unscheduleUpdate(void);
	void setSkewY(float);
	void _setZOrder(int);
	void reorderChild(cocos2d::CCNode*,int);
	void isRunning(void);
	void getShaderProgram(void);
	void getZOrder(void);
	void setScaleX(float);
	void getCamera(void);
	void isIgnoreAnchorPointForPosition(void);
	void getPositionY(void);
	void getRotation(void);
	void getChildrenCount(void);
	void cleanup(void);
}
#endif