// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_packet_2eproto__INCLUDED
#define PROTOBUF_packet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_packet_2eproto();
void protobuf_AssignDesc_packet_2eproto();
void protobuf_ShutdownFile_packet_2eproto();

class Packet;
class Message;

enum Packet_CommandType {
  Packet_CommandType_kCommandHeartbeat = 0,
  Packet_CommandType_kCommandMessage = 1
};
bool Packet_CommandType_IsValid(int value);
const Packet_CommandType Packet_CommandType_CommandType_MIN = Packet_CommandType_kCommandHeartbeat;
const Packet_CommandType Packet_CommandType_CommandType_MAX = Packet_CommandType_kCommandMessage;
const int Packet_CommandType_CommandType_ARRAYSIZE = Packet_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Packet_CommandType_descriptor();
inline const ::std::string& Packet_CommandType_Name(Packet_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Packet_CommandType_descriptor(), value);
}
inline bool Packet_CommandType_Parse(
    const ::std::string& name, Packet_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Packet_CommandType>(
    Packet_CommandType_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_CommandType CommandType;
  static const CommandType kCommandHeartbeat = Packet_CommandType_kCommandHeartbeat;
  static const CommandType kCommandMessage = Packet_CommandType_kCommandMessage;
  static inline bool CommandType_IsValid(int value) {
    return Packet_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Packet_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Packet_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Packet_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Packet_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Packet_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Packet_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 version = 1 [default = 1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required .Packet.CommandType command = 2;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 2;
  inline ::Packet_CommandType command() const;
  inline void set_command(::Packet_CommandType value);

  // optional bytes serialized = 3;
  inline bool has_serialized() const;
  inline void clear_serialized();
  static const int kSerializedFieldNumber = 3;
  inline const ::std::string& serialized() const;
  inline void set_serialized(const ::std::string& value);
  inline void set_serialized(const char* value);
  inline void set_serialized(const void* value, size_t size);
  inline ::std::string* mutable_serialized();
  inline ::std::string* release_serialized();
  inline void set_allocated_serialized(::std::string* serialized);

  // optional uint64 connectionid = 4;
  inline bool has_connectionid() const;
  inline void clear_connectionid();
  static const int kConnectionidFieldNumber = 4;
  inline ::google::protobuf::uint64 connectionid() const;
  inline void set_connectionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_serialized();
  inline void clear_has_serialized();
  inline void set_has_connectionid();
  inline void clear_has_connectionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 version_;
  int command_;
  ::std::string* serialized_;
  ::google::protobuf::uint64 connectionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_packet_2eproto();
  friend void protobuf_AssignDesc_packet_2eproto();
  friend void protobuf_ShutdownFile_packet_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// required uint32 version = 1 [default = 1];
inline bool Packet::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_version() {
  version_ = 1u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Packet::version() const {
  return version_;
}
inline void Packet::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required .Packet.CommandType command = 2;
inline bool Packet::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::Packet_CommandType Packet::command() const {
  return static_cast< ::Packet_CommandType >(command_);
}
inline void Packet::set_command(::Packet_CommandType value) {
  assert(::Packet_CommandType_IsValid(value));
  set_has_command();
  command_ = value;
}

// optional bytes serialized = 3;
inline bool Packet::has_serialized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_serialized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_serialized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_serialized() {
  if (serialized_ != &::google::protobuf::internal::kEmptyString) {
    serialized_->clear();
  }
  clear_has_serialized();
}
inline const ::std::string& Packet::serialized() const {
  return *serialized_;
}
inline void Packet::set_serialized(const ::std::string& value) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(value);
}
inline void Packet::set_serialized(const char* value) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(value);
}
inline void Packet::set_serialized(const void* value, size_t size) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_serialized() {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  return serialized_;
}
inline ::std::string* Packet::release_serialized() {
  clear_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_;
    serialized_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet::set_allocated_serialized(::std::string* serialized) {
  if (serialized_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_;
  }
  if (serialized) {
    set_has_serialized();
    serialized_ = serialized;
  } else {
    clear_has_serialized();
    serialized_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 connectionid = 4;
inline bool Packet::has_connectionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_connectionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_connectionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_connectionid() {
  connectionid_ = GOOGLE_ULONGLONG(0);
  clear_has_connectionid();
}
inline ::google::protobuf::uint64 Packet::connectionid() const {
  return connectionid_;
}
inline void Packet::set_connectionid(::google::protobuf::uint64 value) {
  set_has_connectionid();
  connectionid_ = value;
}

// -------------------------------------------------------------------

// Message

// required string msg = 1;
inline bool Message::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Message::msg() const {
  return *msg_;
}
inline void Message::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Message::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Message::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Message::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet_CommandType>() {
  return ::Packet_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_packet_2eproto__INCLUDED
